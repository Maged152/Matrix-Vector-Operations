#pragma once

#include "vector.hpp"

namespace test
{
	void Add(const qlm::Vector& src1, const qlm::Vector& src2, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void Div(const qlm::Vector& src1, const qlm::Vector& src2, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void Dot(const qlm::Vector& src1, const qlm::Vector& src2, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Mag(const qlm::Vector& src, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Angle(const qlm::Vector& src1, const qlm::Vector& src2, float& angle);
	///////////////////////////////////////////////////////////////////////////
	void Unit(const qlm::Vector& src, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void Mul(const qlm::Vector& src1, const qlm::Vector& src2, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void ScalarAdd(const qlm::Vector& src1, const float val, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void ScalarDiv(const qlm::Vector& src1, const float val, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void ScalarMul(const qlm::Vector& src1, const float val, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void ScalarSub(const qlm::Vector& src1, const float val, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void Sub(const qlm::Vector& src1, const qlm::Vector& src2, qlm::Vector& dst);
	///////////////////////////////////////////////////////////////////////////
	void Sum(const qlm::Vector& src, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Mean(const qlm::Vector& src, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Var(const qlm::Vector& src, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Cov(const qlm::Vector& src1, const qlm::Vector& src2, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Corr(const qlm::Vector& src1, const qlm::Vector& src2, float& dst);
	//////////////////////////////////////////////////////////////////////////
	void Min(const qlm::Vector& src, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void Max(const qlm::Vector& src, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void MinMax(const qlm::Vector& src, float& min, float& max);
	///////////////////////////////////////////////////////////////////////////
	void Norm(const qlm::Vector& src, qlm::Norm norm, float& dst);
	///////////////////////////////////////////////////////////////////////////
	void ArgMin(const qlm::Vector& src, size_t& dst);
	///////////////////////////////////////////////////////////////////////////
	void ArgMax(const qlm::Vector& src, size_t& dst);
	///////////////////////////////////////////////////////////////////////////
	void ArgMinMax(const qlm::Vector& src, size_t& min, size_t& max);
	///////////////////////////////////////////////////////////////////////////
	void WeightedSum(const qlm::Vector& src, const qlm::Vector& weights, const float bias, float& dst);
	///////////////////////////////////////////////////////////////////////////
}